# import os
# from cryptography.hazmat.backends import default_backend
# from cryptography.hazmat.primitives import hashes, serialization
# from cryptography.hazmat.primitives.asymmetric import ec, utils
# from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
# from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
# from cryptography.hazmat.primitives.kdf.hkdf import HKDF

# # AES encryption using a randomly generated key
# def aes_encrypt(key, plaintext):
#     # Generate a random initialization vector (IV)
#     iv = os.urandom(16)
#     # Create an AES-GCM cipher with the key and IV
#     cipher = Cipher(algorithms.AES(key), modes.GCM(iv), backend=default_backend())

#     # Generate the AES-GCM encryptor
#     encryptor = cipher.encryptor()

#     # Encrypt the plaintext and obtain the ciphertext and the authentication tag
#     ciphertext = encryptor.update(plaintext) + encryptor.finalize()
#     tag = encryptor.tag

#     # Return the IV, ciphertext, and tag
#     return iv, ciphertext, tag

# # AES decryption using the provided key, IV, and ciphertext
# def aes_decrypt(key, iv, ciphertext, tag):
#     # Create an AES-GCM cipher with the key and IV
#     cipher = Cipher(algorithms.AES(key), modes.GCM(iv, tag), backend=default_backend())

#     # Generate the AES-GCM decryptor
#     decryptor = cipher.decryptor()

#     # Decrypt the ciphertext and obtain the plaintext
#     plaintext = decryptor.update(ciphertext) + decryptor.finalize()

#     # Return the decrypted plaintext
#     return plaintext

# # ECC encryption of the AES key using the recipient's public key
# def ecc_encrypt(public_key, plaintext):
#     # Generate a random AES key
#     aes_key = os.urandom(16)

#     # Perform ECDH key exchange with the recipient's public key
#     shared_key = private_key.exchange(ec.ECDH(), public_key, default_backend())

#     # Derive a key from the shared key using HKDF
#     derived_key = HKDF(
#         algorithm=hashes.SHA256(),
#         length=16,
#         salt=None,
#         info=b'',
#         backend=default_backend()
#     ).derive(shared_key)

#     # Encrypt the AES key using the derived key
#     encrypted_aes_key = utils.cipher_encrypt(derived_key, aes_key, default_backend())

#     # Encrypt the plaintext using AES with the generated key
#     iv, ciphertext, tag = aes_encrypt(aes_key, plaintext)

#     # Return the encrypted AES key, IV, ciphertext, and tag
#     return encrypted_aes_key, iv, ciphertext, tag

# # ECC decryption of the AES key using the recipient's private key
# def ecc_decrypt(private_key, encrypted_aes_key, iv, ciphertext, tag):
#     # Perform ECDH key exchange with the sender's public key
#     shared_key = private_key.exchange(ec.ECDH(), public_key, default_backend())

#     # Derive a key from the shared key using HKDF
#     derived_key = HKDF(
#         algorithm=hashes.SHA256(),
#         length=16,
#         salt=None,
#         info=b'',
#         backend=default_backend()
#     ).derive(shared_key)

#     # Decrypt the AES key using the derived key
#     aes_key = utils.cipher_decrypt(derived_key, encrypted_aes_key, default_backend())

#     # Decrypt the ciphertext using AES with the decrypted key
#     plaintext = aes_decrypt(aes_key, iv, ciphertext, tag)

#     # Return the decrypted plaintext
#     return plaintext

# # Example usage
# plaintext = b'This is the message to be encrypted and decrypted.'

# # Generate ECC keypair
# private_key = ec.generate_private_key(ec.SECP256R1(), default_backend())
# public_key = private_key.public_key()

# # Encrypt the plaintext using AES and ECC
# encrypted_aes_key, iv, ciphertext, tag = ecc_encrypt(public_key, plaintext)

# # Decrypt the ciphertext using AES and ECC
# decrypted_plaintext = ecc_decrypt(private_key, encrypted_aes_key, iv, ciphertext, tag)

# # Print the original plaintext and the decrypted plaintext to verify correctness
# print("Original Plaintext:", plaintext.decode())
# print("Decrypted Plaintext:", decrypted_plaintext.decode())


# from cryptography.hazmat.primitives import serialization
# from cryptography.hazmat.primitives.asymmetric import ec
# from cryptography.hazmat.backends import default_backend
# import binascii

# # Generate a single ECC private key
# private_key = ec.generate_private_key(ec.SECP192R1(), default_backend())

# # Get the corresponding public key
# public_key = private_key.public_key()


# # private_key = binascii.hexlify(private_key.private_numbers().private_value.to_bytes(32, 'big')).decode()
# # print(private_key)
# # public_key = binascii.hexlify(public_key.public_numbers())
# # print(public_key)
# # Print the private and public keys
# print("Private Key:", private_key.private_bytes(
#     encoding=serialization.Encoding.PEM,
#     format=serialization.PrivateFormat.PKCS8,
#     encryption_algorithm=serialization.NoEncryption()
# ).decode())

# print("Public Key:", public_key.public_bytes(
#     encoding=serialization.Encoding.PEM,
#     format=serialization.PublicFormat.SubjectPublicKeyInfo
# ).decode())


import tkinter as tk

def delete_textbox():
    textbox.delete("1.0","end")  # Remove the text box from the window

root = tk.Tk()

textbox = tk.Text(root)
textbox.pack()

delete_button = tk.Button(root, text="Delete Text Box", command=delete_textbox)
delete_button.pack()

root.mainloop()



